Web of Trust Version 0.4.6 build0020
------------------------------------------------------------------------

SUMMARY AND OUTLOOK (detailed changelog is below):

Summary blah blah. Blah blah reference to link [1].

Outlook blah blah.


CHANGELOG - prefixed with the bugtracker issue number:

- 0000001: title_of_issue_1.............................................
           more_lines_of_title..........................................

  Blah.
  Blah.

- 0000002: .............................................................
           .............................................................
  0000003: .............................................................
           .............................................................

  Blah.
  Blah.

- 0006835: Merge random nickname improvement (ArneBab)

  Some very short name templates such as "D" or "CNR" were removed to
  make the names more pleasant.

  Further the wizard for creating identities has been changed to remove
  the following warning:
     "If you don't like it please do not reload the page to generate
      another random name - this also reveals something about your
      preferences!"

  It was removed because:
  - it's nice if users can have a name which they identify with.
  - it seems very difficult for an attacker to even find a place where
    statistics about the name preferences of someone could be
    acquired. Without stats, it is impossible to take good guesses which
    random nicknames belong to whom.

CHANGELOG about stuff only interesting for developers:

- 0006895: (Almost) Full unit test coverage for class Score

  Thanks to the Cobertura test coverage analysis tool which WoT supports
  since the previous release, efforts have begun towards achieving 100%
  test coverage in WoT.

  Thus as a first step this release delivers a rewrite of the test for
  class Score, which is one of the most important core classes.
  It has got 94% line coverage and 89 % branch coverage.
  Previously line coverage of this was 75%, branch coverage 58%.
  The new test is 1190 lines long itself, the old one was merely 138.
  So while the old test did have a high coverage level, it probably
  didn't check most of the behavior of the stuff it happened to cause
  to execute - remember: coverage percentages only say what is executed,
  not whether it is actually tested.
  When designing the new test I tried to test every aspect of the code
  no matter how unlikely to fail it seems.
  This gives us good insurance against future bogus modifications, which
  could for example happen when we migrate from db4o to a different
  database.

  The few percents which are missing towards 100% are due to not testing
  deprecated code; and due to the fact that the Ant builder of WoT does
  not support Mockito yet - without it we cannot cause the internal
  failures required to cover the remaining branches.
  A bug has been filed to address this in the future:
  https://bugs.freenetproject.org/view.php?id=6915

  As a result of reviewing and testing almost every aspect of class
  Score, various non-critical bugs in Score and other core classes were
  detected and fixed:
  - Minor performance improvement: Remove useless synchronization of all
    the getters / setters at Score and Trust
  - Make IdentityID / TrustID / ScoreID detect too short IDs
  - Remove incompliant hashCode() there
  - Unify toString() of core classe to get coherent logging
  - Fix creation date of Score not always being strictly equal to date
    of modification after creation
  - Provide replacement for deprecated function at Score
  - Score.setCapacity(): Check whether capacity is legal
  - Score.getDateOfCreation(): Remove duplicate function
  - Score.clone(): Fix to copy mVersionID
  - Score.startupDatabaseIntegrityTest(): Check mCapacity and mVersionID
  - Main class WebOfTrust: Document what capacities are, provide array
    with all valid ones
  - DateUtil: New class to provide waitUntilCurrentTimeUTCIsAfter(),
    useful for unit tests
  - AbstractJUnit4BaseTest: Migrate more functions from the JUnit 3
    predecessor of this class

  Irrelevant but interesting random statistics: The tested class Score
  itself is 540 lines of code. Comparing that to the 1190 lines of
  test code for it shows that the metric for how long full unit tests
  are typically may be "twice as much as the tested code itself."


Thanks to:
  - ArneBab

Links:
  [1] https://...
