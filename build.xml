<?xml version="1.0"?>
<!-- ant build file for WoT -->

<project name="WoT" default="dist" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<property file="override.properties"/>
	<property name="db4o-submodule.location" location="db4o-7.4"/>
	<property name="db4o.location" location="${db4o-submodule.location}/db4o.jar"/>
	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="bcprov.location" location="../fred/lib/bcprov.jar"/>
	<property name="jna.location" location="../fred/lib/jna.jar"/>
	<property name="jna-platform.location" location="../fred/lib/jna-platform.jar"/>
	<property name="debug-node-wot-plugin.location" location="../fred/plugins/WebOfTrust.jar"/>
	<property name="svn.revision" value="@custom@"/>
	<property name="source-version" value="1.7"/>
	<property name="target-version" value="1.7"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="build-test-jar" location="${build-test}/WebOfTrust-with-unit-tests.jar"/>
	<property name="build-test-coverage" location="test-coverage/"/>
	<property name="dist" location="dist/"/>
	<property name="src" location="src/"/>
	<property name="javadoc" location="javadoc/"/>
	<property name="junit.location" value="/usr/share/java/junit4.jar"/>
	<property name="hamcrest.location" value="/usr/share/java/hamcrest-core.jar"/>
	<property name="cobertura.location" value="/usr/share/java/cobertura.jar"/>
	<property name="version.src" value="plugins/WebOfTrust/Version.java" />
	<property name="version.build" value="plugins/WebOfTrust/Version.class" />

	<available file="src/plugins/WebOfTrust/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>
	<available file="${hamcrest.location}" property="hamcrest.present"/>
	<available file="${cobertura.location}" property="cobertura.present"/>
	<property name="test.coverage" unless:set="${test.coverage}" if:true="${cobertura.present}" value="true"/>

	<!-- Libraries whose classes are to be bundled in our own JAR. -->
	<path id="submodules.path">
		<pathelement location="${db4o.location}"/>
	</path>
	<!-- Libraries which we get from fred. -->
	<path id="lib.path">
		<pathelement location="${bcprov.location}"/>
		<pathelement location="${jna-platform.location}"/>
		<pathelement location="${jna.location}"/>
		<pathelement location="${freenet-ext.location}"/>
		<pathelement location="${freenet-cvs-snapshot.location}"/>
	</path>

	<path id="cobertura.path">
		<pathelement location="${cobertura.location}"/>
	</path>

	<presetdef name="javac">
		<!--
		Workaround for ant 1.8 misfeature. TODO: Remove when ant fixes this.
		
		If we don't set this to false, we will get "warning: 'includeantruntime' was not set, defaulting to
		build.sysclasspath=last; set to false for repeatable builds"
		
		(includeAntRuntime = "Whether to include the Ant run-time libraries in the classpath; defaults to yes, 
		unless build.sysclasspath is set. It is usually best to set this to false so the script's behavior 
		is not sensitive to the environment in which it is run."
		Source: https://ant.apache.org/manual/Tasks/javac.html)
		-->
		<javac includeantruntime="false" />
	</presetdef>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
		<arg value="--dirty" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<target name="get-submodules" description="Downloads the git submodules required by WoT">
		<exec executable="git">
			<arg line="submodule update --init"/>
		</exec>
	</target>

	<target name="db4o" depends="get-submodules" description="Compiles the database submodule">
		<ant dir="${db4o-submodule.location}" inheritAll="false" useNativeBasedir="true">
			<property name="javac.source.version" value="${source-version}"/>
			<property name="javac.target.version" value="${target-version}"/>
		</ant>
	</target>

	<target name="clean-db4o" depends="get-submodules" description="Cleans the database submodule">
		<ant dir="${db4o-submodule.location}" target="clean" inheritAll="false"
			useNativeBasedir="true"/>
	</target>

	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${build-test}/test"/>
		<mkdir dir="${build-test-coverage}"/>
		<mkdir dir="${dist}"/>
		<echo message="Using ${db4o.location} as db4o.jar"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
		<echo message="Using ${bcprov.location} as bcprov.jar"/>
		<echo message="Using ${jna.location} as jna.jar"/>
		<echo message="Using ${jna-platform.location} as jna-platform.jar"/>
		<echo message="Using ${cobertura.location} as cobertura.jar"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="db4o, mkdir" >
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}" encoding="UTF-8">
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="${version.src}"/>
		</javac>
		<copy todir="${build}">
			<fileset dir="src/">
				<include name="**/*.l10n" />
			</fileset>
		</copy>
	</target>

	<!-- ================================================== -->

	<condition property="unit.dependencies">
		<and>
			<istrue value="${junit.present}"/>
			<istrue value="${hamcrest.present}"/>
		</and>
	</condition>

	<target name="junit-compile" depends="compile" if="unit.dependencies">
		<javac srcdir="test/" destdir="${build-test}/test" debug="on" optimize="on"
				source="${source-version}" target="${target-version}" >
			
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
		
		<!-- Copy main non-test classes to tests so we can produce a full working WoT JAR -->
		<copy todir="${build-test}/test" overwrite="false">
			<fileset dir="${build}/"/>
		</copy>
	</target>
	
	<target name="junit-inject-cobertura" depends="clean, junit-compile"
			if="${test.coverage}" unless="${test.benchmark}">
		
		<fail unless:true="${cobertura.present}" message="${cobertura.location} not found!"/>
		
		<taskdef classpathref="cobertura.path" resource="tasks.properties"/>
		
		<cobertura-instrument datafile="${build-test-coverage}/cobertura.ser">
			<fileset dir="${build-test}/test">
				<include name="**/*.class" />
				<!-- kaptcha is a third-party library -->
				<exclude name="plugins/WebOfTrust/introduction/captcha/kaptcha/**/*"/>
				<exclude name="**/*Test*.class"/>
				<exclude name="**/*Benchmark*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="junit-package" depends="junit-compile, junit-inject-cobertura">
		<jar jarfile="${build-test-jar}" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.WebOfTrust.WebOfTrust"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/> <!-- Include the GPL -->
			</fileset>
			
			<fileset dir="${build-test}/test/"/> <!-- Separate directory to exclude the JAR -->
			<zipfileset>
				<path refid="submodules.path"/>
			</zipfileset>
		</jar>
	</target>

	<target name="junit" depends="junit-package" unless="${test.skip}"
			description="Runs all unit tests. Options:&#10;
		        - Set test.coverage=true to analyze test coverage&#10;
		        - Set test.skip=true to skip&#10;
		        - Set test.class=&lt;test class&gt; (e.g. test.class=plugins.WebOfTrust.WoTTest) to run a single test)&#10;
		        - Set test.benchmark=true to run benchmarks.&#10;
		        - Set test.unreliable=true to run tests which may fail on slow machines.">
		
		<fail unless="${unit.dependencies}" message="One of the unit test dependencies not found:&#10;
			${junit.location}&#10;
			${hamcrest.location}&#10;
			Use parameter -Dtest.skip=true to compile without running the self-tests.&#10;
			WARNING: Web of Trust uses lots of comprehensive tests, changing the code without&#10;
			running them is a very bad idea!"/>
		
		<!-- Regular non-benchmark unit tests. -->
		<junit printsummary="yes" fork="yes" haltonfailure="yes" unless:true="${test.benchmark}">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="${build-test-jar}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
				<pathelement location="${cobertura.location}" if:true="${test.coverage}"/>
			</classpath>

			<!-- Workaround for Cobertura failing on Java 7 with:
				   "Expecting a stackmap frame at branch target [...]"
			     TODO: Remove if not necessary anymore. Added on 2016-05-31. -->
			<jvmarg if:true="${test.coverage}" value="-XX:-UseSplitVerifier"/>
			
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<test if="test.class" name="${test.class}"/>
			<batchtest unless="test.class" fork="yes">
				<zipfileset src="${build-test-jar}">
					<include name="**/*Test*.class"/>
					<!-- Exclude member classes:
					     Java will auto-generate switchtable classes for switch() upon enums.
					     JUnit would then complain that those classes do not contain a public
					     constructor. -->
					<exclude name="**/*$*.class"/>
					<exclude name="**/*Benchmark*.class"/>
					<exclude name="**/SynchronousDelayedBackgroundJobTest.class"
						unless="test.unreliable" />
					<exclude name="**/TickerDelayedBackgroundJobTest.class"
						unless="test.unreliable" />
					<exclude name="com/db4o/**"/>
				</zipfileset>
			</batchtest>
			
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${build-test-coverage}/cobertura.ser" if:true="${test.coverage}"/>
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
			<jvmarg value="-Djava.awt.headless=true"/>
			<!-- Pass the name of the JAR to the tests so they can load it into a fred instance -->
			<jvmarg value="-DWOT_test_jar=${build-test-jar}"/>
		</junit>
		
		<cobertura-report if:true="${test.coverage}" unless:true="${test.benchmark}"
			srcdir="${src}"
			datafile="${build-test-coverage}/cobertura.ser"
			destdir="${build-test-coverage}/html"
			format="html"/>
		
		<!-- Benchmarks. They need assertions disabled so they're a task of their own. -->
		<!-- Also, we set showoutput="true" so you get live output as benchmarks take a long time -->
		<junit printsummary="yes" showoutput="true" fork="yes" haltonfailure="yes" if:true="${test.benchmark}">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="${build-test-jar}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
			</classpath>

			<assertions><disable/></assertions>
			<formatter type="plain" usefile="false"/>
			<test if="test.class" name="${test.class}"/>
			<batchtest unless="test.class" fork="yes">
				<zipfileset src="${build-test-jar}">
					<include name="**/*Benchmark*.class"/>
					<!-- Exclude member classes:
					     Java will auto-generate switchtable classes for switch() upon enums.
					     JUnit would then complain that those classes do not contain a public
					     constructor. -->
					<exclude name="**/*$*.class"/>
					<exclude name="com/db4o/**"/>
				</zipfileset>
			</batchtest>
			
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
			<jvmarg value="-Djava.awt.headless=true"/>
			<!-- Pass the name of the JAR to the tests so they can load it into a fred instance -->
			<jvmarg value="-DWOT_test_jar=${build-test-jar}"/>
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,compile,junit"
		description="generate the distribution" >
		
		<jar jarfile="${dist}/WebOfTrust.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.WebOfTrust.WebOfTrust"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/> <!-- Include the GPL -->
			</fileset>
			<fileset dir="${build}/"/>
			<zipfileset>
				<path refid="submodules.path"/>
			</zipfileset>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="javadoc" description="generate javadocs">
		<delete dir="${javadoc}"/>
		<path id="javadoc.classpath">
			<path refid="submodules.path"/>
			<path refid="lib.path"/>
		</path>
		<javadoc classpathref="javadoc.classpath" destdir="${javadoc}" author="true" version="true" use="true" private="true">
			<fileset dir="src/" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://docs.oracle.com/javase/6/docs/api/"/>
			<link href="http://freenetproject.org/javadocs/"/>
		</javadoc>
	</target>

	<!-- ================================================== -->
	<target name="clean" depends="clean-db4o" description="Delete class files and docs dir and the plugin file in plugins/ of your debug node.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${build-test-coverage}"/>
		<delete dir="${dist}"/>
		<delete file="${debug-node-WebOfTrust-plugin.location}"/>
	</target>
</project>
