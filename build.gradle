println 'WARNING: This script merely exists to speed up Travis CI builds! Use Ant for producing official JARs!'
println 'This notably is because I did NOT read any Gradle tutorial whatsoever yet and thus cannot guarantee its safety!'

apply plugin: 'java'
defaultTasks 'jar', 'test'

sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']

dependencies {
	// WARNING: The way we declare dependencies here is NOT how Gradle is intended to be used!
	// I made it use them from the local filesystem, but they should be downloaded by Gradle
	// instead.
	// I've done so because I currently do not have the time to maintain a gradle-witness list of
	// hashes of trustworthy binaries. So for now I'm rather outsourcing determination of what
	// binaries are safe to fred and OS maintainers as they're dealing with that already anyway.
	// TODO: Code quality: Figure out whether it is possible to inherit their gradle-witness
	// decisions automatically.
	
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	
	testCompile files('/usr/share/java/junit4.jar')
	testCompile files('/usr/share/java/hamcrest-core.jar')
}

task compileDb4o(type: Exec) {
	workingDir 'db4o-7.4'
	commandLine 'ant'
}

def version_file = 'plugins/WebOfTrust/Version'
def version_src = "${version_file}.java"
def version_buildir = "$projectDir/build/tmp/compileVersion/"

task prepareVersion(type: Copy) {
    from sourceSets.main.java.srcDirs
    into "${version_buildir}"
    include "${version_src}"
    filter {
        String line -> line.replaceAll("@custom@",
            "git describe --always --abbrev=4 --dirty".execute().text.trim())
    }
}

task compileVersion(type: JavaCompile, dependsOn: 'prepareVersion') {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${buildDir}/version/")
}

compileJava {
	dependsOn 'compileDb4o', 'compileVersion'
}

compileJava << {
	copy {
		from "${buildDir}/version/"
		include "${version_file}.class"
		into sourceSets.main.output.classesDir
		duplicatesStrategy = 'overwrite'
	}
}

["jar", "testJar"].each { jarType ->
task("$jarType", type: Jar, overwrite: true, dependsOn: ['compileJava', 'compileTestJava']) {
    from (sourceSets.main.output.classesDir) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    if(jarType == 'testJar') {
        from (sourceSets.test.output.classesDir) {
            preserveFileTimestamps = false
            reproducibleFileOrder = true
        }
    }
    from (sourceSets.main.java.srcDirs) {
       include 'plugins/WebOfTrust/gpl.txt'
       include 'plugins/WebOfTrust/l10n/*.l10n'
    }
    from (zipTree('db4o-7.4/db4o.jar')){
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    duplicatesStrategy = "fail" // FIXME: Test if this can be omitted
    baseName = (jarType == 'testJar') ? 'WebOfTrust-with-unit-tests' : 'WebOfTrust'
    manifest {
        attributes("Plugin-Main-Class": "plugins.WebOfTrust.WebOfTrust")
    }
}
}

test {
    dependsOn 'testJar'

    classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
    classpath+= project.files("${project.libsDir}/WebOfTrust-with-unit-tests.jar")
    
    minHeapSize = "128m"
    maxHeapSize = "512m"
    
    include '**/*Test*.class'
    // Exclude member classes:
    // Java will auto-generate switchtable classes for switch() upon enums.
    // JUnit would then complain that those classes do not contain a public
    // constructor.
    exclude '**/*$*.class'
    exclude '**/*Benchmark*.class'
    exclude 'com/db4o/**'
    if(!hasProperty('test.unreliable')) {
        exclude '**/SynchronousDelayedBackgroundJobTest.class'
        exclude '**/TickerDelayedBackgroundJobTest.class'
    }
    
    workingDir = sourceSets.test.output.classesDir
    scanForTestClasses = false
    systemProperties += [
        "is_WOT_unit_test": "true",
        "WOT_test_jar": "FIXME"
    ]
}

javadoc {
    enabled false
}
