// FIXME: Mention this script in README. Say that it is experimental.

apply plugin: 'java'
defaultTasks 'jar', 'test'
sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']
sourceCompatibility = 7
targetCompatibility = 7

configurations { junit }
dependencies {
	// TODO: Code quality: Use Gradle's native dependency management + gradle-witness instead of flat files
	// Postponing this until I know how to import fred's dependency list to avoid duplicating it.
	
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	
	junit files('/usr/share/java/junit4.jar')
	junit files('/usr/share/java/hamcrest-core.jar')
	
	testCompile configurations.junit
}

task compileDb4o(type: Exec) {
	workingDir 'db4o-7.4'
	commandLine 'ant', "-Djavac.source.version=" + sourceCompatibility,
	                   "-Djavac.target.version=" + targetCompatibility
}

def version_file = 'plugins/WebOfTrust/Version'
def version_src = "${version_file}.java"
def version_buildir = "$projectDir/build/tmp/compileVersion/"

task prepareVersion(type: Copy) {
    from sourceSets.main.java.srcDirs
    into "${version_buildir}"
    include "${version_src}"
    filter {
        String line -> line.replaceAll("@custom@",
            "git describe --always --abbrev=4 --dirty".execute().text.trim())
    }
}

task compileVersion(type: JavaCompile, dependsOn: 'prepareVersion') {
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${buildDir}/version/")
}

compileJava {
	dependsOn 'compileDb4o', 'compileVersion'
	doLast { copy {
		from "${buildDir}/version/"
		include "${version_file}.class"
		into sourceSets.main.output.classesDir
	}}
}

["jar", "testJar"].each { jarType ->
task("$jarType", type: Jar, overwrite: true, dependsOn: ['compileJava', 'compileTestJava']) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = "fail" // FIXME: Test if this can be omitted
    baseName = (jarType == 'testJar') ? 'WebOfTrust-with-unit-tests' : 'WebOfTrust'
    destinationDir = new File(projectDir, (jarType == 'testJar') ? "build-test" : "dist")
    
    from sourceSets.main.output.classesDir
    from(sourceSets.main.java.srcDirs) {
        include 'plugins/WebOfTrust/gpl.txt'
        include 'plugins/WebOfTrust/l10n/*.l10n'
    }
    
    from zipTree('db4o-7.4/db4o.jar')
    if(jarType == 'testJar') from sourceSets.test.output.classesDir
    
    manifest {
        attributes("Plugin-Main-Class": "plugins.WebOfTrust.WebOfTrust")
    }
}
}

test {
    dependsOn 'testJar'
    def testJarFile = "${projectDir}/build-test/WebOfTrust-with-unit-tests.jar"
    
    // Reset classpath to ensure only the JAR is used, not the class files. We want to only use the
    // JAR because:
    // - some WoT tests need a JAR to load into a Freenet node
    // - and given that a JAR is needed anyway we shouldn't duplicate the classes by using the
    //   class files as well.
    classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
    classpath+= files(testJarFile)
    classpath+= configurations.junit
    doFirst {
        println 'Classpath for test runner:'
        classpath.each { file -> println ' ' + file }
    }
    
    scanForTestClasses = false
    include '**/*Test*.class'
    // Exclude member classes:
    // Java will auto-generate switchtable classes for switch() upon enums.
    // JUnit would then complain that those classes do not contain a public
    // constructor.
    exclude '**/*$*.class'
    exclude '**/*Benchmark*.class'
    exclude 'com/db4o/**'
    if(!hasProperty('test.unreliable')) {
        exclude '**/SynchronousDelayedBackgroundJobTest.class'
        exclude '**/TickerDelayedBackgroundJobTest.class'
    }
    
    // TODO: Performance: Why doesn't this work on Travis CI?
    // Says: Could not set unknown property 'failFast' ...
    // failFast = true

    maxHeapSize = "512m"
    maxParallelForks = Runtime.runtime.availableProcessors()
    doFirst { println 'Max test threads (can be limited by worker count): ' + maxParallelForks }
    // Don't run multiple tests in the same VM: WoT, db4o and Freenet are to complex to be able to
    // tell whether this is safe. Also this is likely needed for maxParallelForks to actually work.
    forkEvery = 1
    systemProperties += [
        "is_WOT_unit_test": "true",
        "WOT_test_jar": testJarFile
    ]
    workingDir = "${buildDir}/tmp/testsWorkingDir"
    doFirst { delete workingDir ; mkdir workingDir }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

javadoc {
    enabled false
}

clean {
	delete "${projectDir}/build-test"
	delete "${projectDir}/test-coverage" // From Ant
	delete "${projectDir}/dist"
	exec { workingDir 'db4o-7.4' ; commandLine 'ant','clean' }
}
