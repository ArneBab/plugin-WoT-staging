println 'This script merely exists to speed up Travis CI builds! Use Ant for producing official JARs!'
println 'This notably is because I did NOT read any Gradle tutorial whatsoever yet and thus cannot guarantee its safety!'

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:1.4.+'
    }
}

apply plugin: 'java'

def version_buildir = "$projectDir/build/tmp/compileVersion/"
def version_src = 'freenet/node/Version.java'

sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']

task compileVersion (type: JavaCompile) {
    copy {
        from sourceSets.main.java.srcDirs
        into "${version_buildir}"
        include "${version_src}"
        filter {
            String line -> line.replaceAll("@custom@",
                 "git describe --always --abbrev=4 --dirty".execute().text.trim())
        }
    }
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${buildDir}/java/version/")
}
compileVersion.dependsOn buildInfo
compileVersion.dependsOn compileJava
processResources.dependsOn compileVersion

task jar (type: Jar, overwrite: true) {
    from (compileVersion) {
        include 'freenet/node/Version**class'
	preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    from ("${buildDir}/classes/java/main/") {
        exclude 'freenet/node/Version.class'
        exclude 'freenet/node/Version$1.class'
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    from (sourceSets.main.java.srcDirs) {
       include 'plugins/WebOfTrust/gpl.txt'
       include 'plugins/WebOfTrust/l10n/*.l10n'
    }
    duplicatesStrategy = "exclude"
    archivesBaseName = "freenet"
    manifest {
        attributes("Plugin-Main-Class": "plugins.WebOfTrust.WebOfTrust")
    }
}
jar.dependsOn processResources

task copyResourcesToClasses2 {
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into sourceSets.main.output.classesDir
            include 'plugins/WebOfTrust/gpl.txt'
            include 'plugins/WebOfTrust/l10n/*.l10n'
        }
    }
}
compileTestJava.dependsOn copyResourcesToClasses2

test {
    minHeapSize = "128m"
    maxHeapSize = "512m"
    
    include '**/*Test*.class'
    // Exclude member classes:
    // Java will auto-generate switchtable classes for switch() upon enums.
    // JUnit would then complain that those classes do not contain a public
    // constructor.
    exclude '**/*$*.class'
    exclude '**/*Benchmark*.class'
    exclude 'com/db4o/**'
    if(!hasProperty('test.unreliable')) {
        exclude '**/SynchronousDelayedBackgroundJobTest.class'
        exclude '**/TickerDelayedBackgroundJobTest.class'
    }
    
    workingDir = sourceSets.test.output.classesDir
    scanForTestClasses = false
    systemProperties += [
        "is_WOT_unit_test": "true"
        "WOT_test_jar": "FIXME"
    ]
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	
	testCompile files('/usr/share/java/junit4.jar')
	testCompile files('/usr/share/java/hamcrest-core.jar'
}

javadoc {
    enabled false
}
