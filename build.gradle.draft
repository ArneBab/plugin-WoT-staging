logger.warn('This script merely exists to speed up Travis CI builds! Use Ant for producing official JARs!')
logger.warn('This notably is because I did NOT read any Gradle tutorial whatsoever yet and thus cannot guarantee its safety!)

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

configurations {
    provided
    compile
}

apply plugin: 'java'

repositories {
    mavenLocal() // TODO: use lib/ instead?
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
}

def version_buildir = "$projectDir/build/tmp/compileVersion/"
def version_src = 'freenet/node/Version.java'

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
    test {
        java {
            srcDir 'test/'
        }
    }
}

def gitrev
task buildInfo {
    try {
        def cmd = "git describe --always --abbrev=4 --dirty"
        def proc = cmd.execute()
        gitrev = proc.text.trim()
    } catch (java.io.IOException e) {
        gitrev = "@unknown@"
    }
}

task compileVersion (type: JavaCompile) {
    copy {
        from sourceSets.main.java.srcDirs
        into "${version_buildir}"
        include "${version_src}"
        filter {
            String line -> line.replaceAll("@custom@","${gitrev}")
        }
    }
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${buildDir}/java/version/")
}
compileVersion.dependsOn buildInfo
compileVersion.dependsOn compileJava
processResources.dependsOn compileVersion

task jar (type: Jar, overwrite: true) {
    from (compileVersion) {
        include 'freenet/node/Version**class'
	preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    from ("${buildDir}/classes/java/main/") {
        exclude 'freenet/node/Version.class'
        exclude 'freenet/node/Version$1.class'
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    duplicatesStrategy = "exclude"
    archivesBaseName = "freenet"
    manifest {
        attributes("Permissions": "all-permissions")
        attributes("Application-Name": "Freenet REference Daemon")
        attributes("Required-Ext-Version": 29)
        attributes("Recommended-Ext-Version": 29)
        attributes("Compiled-With": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})")
        attributes([
                       "Specification-Title": "Freenet",
                       "Specification-Version": "0.7.5",
                       "Specification-Vendor": "freenetproject.org",
                       "Implementation-Title": "Freenet",
                       "Implementation-Version": "0.7.5 ${gitrev}",
                       "Implementation-Vendor": "freenetproject.org",
                   ], "common")
    }
}
jar.dependsOn processResources

def jars = []
gradle.addListener(new TaskExecutionListener() {
void afterExecute(Task task, TaskState state) {
    if(task in AbstractArchiveTask) {
        jars << task.outputs.files.singleFile
    }
}

void beforeExecute(Task task) { }
})
gradle.addBuildListener(new BuildAdapter() {
    void buildFinished(BuildResult result) {
        if(jars) {
            def hash = {
                File file -> def sha256 = java.security.MessageDigest.getInstance('SHA-256')
                file.eachByte(1024 * 4) { buffer, len -> sha256.update(buffer, 0, len) }
                println "SHA-256 of ${file.name}: ${sha256.digest().encodeHex().toString()}"
            }

            jars.each { hash(it) }
        }
    }
})

task copyResourcesToClasses2 {
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into sourceSets.main.output.classesDir
            include 'freenet/l10n/*properties'
            include 'freenet/l10n/iso-*.tab'
            include 'freenet/clients/http/staticfiles/**'
            include '../dependencies.properties'
        }
        copy {
            from "${projectDir}/"
            into sourceSets.main.output.classesDir
            include 'dependencies.properties'
        }
    }
}
processResources.dependsOn copyResourcesToClasses2

task copyTestResourcesToClasses2 {
    inputs.dir sourceSets.test.java.srcDirs
    outputs.dir sourceSets.test.output.classesDir
    doLast {
        copy {
	    from sourceSets.test.java.srcDirs
	    into sourceSets.test.output.classesDir
            include 'freenet/client/filter/*/**'
            include 'freenet/crypt/ciphers/rijndael-gladman-test-data/**'
            include 'freenet/l10n/*properties'
        }
    }
}
compileTestJava.dependsOn copyResourcesToClasses2
compileTestJava.dependsOn copyTestResourcesToClasses2

test {
    minHeapSize = "128m"
    maxHeapSize = "512m"
    // no inner class
    include 'freenet/**/*Test.class'
    exclude 'freenet/**/*$*Test.class'
    workingDir = sourceSets.test.output.classesDir
    scanForTestClasses = false
    systemProperties += [
        "test.l10npath_test": "freenet/l10n/",
        "test.l10npath_main": "../main/freenet/l10n/"
//	"test.extensive":
//	"test.verbose":
//	"test.benchmark":
    ]
}

task copyRuntimeLibs(type: Copy) {
    into "${buildDir}/output/"
    from configurations.runtime
    from jar
}
copyRuntimeLibs.dependsOn jar

// In this section you declare the dependencies for your production and test code
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	
	testCompile files('/usr/share/java/junit4.jar')
	testCompile files('/usr/share/java/hamcrest-core.jar'
}

javadoc << {
    failOnError false
}
